{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","input","setInput","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","value","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","load","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mLA6BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OACE,uBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA2BO,OACzCN,EAAS,MAIX,UACE,6BAAKD,IACL,uBAAOQ,KAAK,OAAOC,SAdG,SAACN,GACzBF,EAASE,EAAEO,OAAOC,QAagCA,MAAOX,Q,+BCpBhDY,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEACFC,MAAM,0CAAD,OACoBC,UACxCH,GAFoB,uDADH,cACfI,EADe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAXjB,kBAcdL,GAdc,2CAAH,sDCEPQ,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,IAAKD,EAAY,EAAZA,MACjC,OACE,mCACE,sBAAKK,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,UCDCQ,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAKxB,ECT0B,SAACA,GAC3B,MAA0Bd,mBAAS,CAAEoB,KAAM,GAAIc,MAAM,IAArD,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPhB,KAAMmB,EACNL,MAAM,MAEP,UAEJ,CAACpB,IAEGqB,EDJwBM,CAAa3B,GAA9Ba,EAAd,EAAQP,KAAcc,EAAtB,EAAsBA,KACtB,OACE,qCACE,6BAAKpB,IACJoB,GAAQ,mBAAGJ,UAAU,wCAAb,yBACT,qBAAKA,UAAU,YAAf,SACGH,EAAOL,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEQxBkB,EAtBM,WACnB,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAMA,OACE,qCACE,iDAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWc,KAAI,SAACR,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,4BCb/B6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.685ca49a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleChangeInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (input.trim().length > 2) {\r\n      setCategories((categories) => [input, ...categories]);\r\n      setInput(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>{input}</h2>\r\n      <input type=\"text\" onChange={handleChangeInput} value={input} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n  const resp = await fetch(\r\n    `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n      category\r\n    )}&limit=10&api_key=IcY3HyYnbTz1F9dbpLifRY26KvAAzJYZ`\r\n  );\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ url, title }) => {\r\n  return (\r\n    <>\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","// import React, { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  // useEffect(() => {\r\n  //   getGifs(category).then(setImages);\r\n  // }, [category]);\r\n  const { data: images, load } = useFetchGifs(category);\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {load && <p className=\"card animate__animated animate__flash\">cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"./../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({ data: [], load: true });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setstate({\r\n          data: imgs,\r\n          load: false,\r\n        });\r\n      }, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n  // const handleAdd = (e) => {\r\n  //   // setCategories([...categories,\"Death Note\"]);\r\n  //   setCategories([\"Death Note\", ...categories]); //Aparecera Death Note al principio\r\n  //   // setCategories((categories) => [...categories, \"Digimon\"]); Esta es otra forma de agregar un nuevo valor al array del estado\r\n  // };\r\n  return (\r\n    <>\r\n      <h2>Gift Expert App</h2>\r\n      {/* <button onClick={handleAdd}>Agregar Anime</button> */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport ReactDOM from \"react-dom\";\nimport \"animate.css\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}